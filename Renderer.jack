class Renderer
{
    /** Render all parts */
    function void renderState(Tank tank, BulletList bullets, InvaderList invaders)
    {
        var BulletList currentBullets;
        var Bullet currentBullet;
        var InvaderList currentInvaders;
        var Invader currentInvader;

        let currentBullets = bullets;
        let currentInvaders = invaders;

        do Screen.clearScreen();

        if (~(tank = null))
        {
            do Renderer.renderObject(tank.getLocation(), tank.getPixels());
        }
        
        while (~(currentInvaders = null))
        {
            let currentInvader = currentInvaders.getData();
            
            // If this is an empty list, getData() will return null
            if (~(currentInvader = null))
            {
                do Renderer.renderObject(currentInvader.getLocation(), currentInvader.getPixels());
            }
            let currentInvaders = currentInvaders.getNext();
        }
        
        while (~(currentBullets = null))
        {
            let currentBullet = currentBullets.getData();

            // If this is an empty list, getData() will return null
            if (~(currentBullet = null))
            {
                // Not using generic renderObject, as this is a basic sprite and drawRectangle is easier
                // and more pixel-perfect
                do Renderer.renderBullet(currentBullet);
            }
            let currentBullets = currentBullets.getNext();
        }
        
        return;
    }

    /** Render any object by passing in its memory location and its sprite as an array of pixels */
    function void renderObject(int objectMemLocation, Array pixels)
    {
        var int memAddress;
        var int i;
        let memAddress = 16384+objectMemLocation;
        let i = 0;

        while (i < 12)
        {
            if (~(pixels[i] = 0))
            {
                do Memory.poke(memAddress+(i * 32), pixels[i]);
            }
            let i = i + 1;
        }
        return;
    }

    /** Render any bullet by passing the object. Because bullets are a simple shape
      * This makes more sense for pixel placement than using the generic renderObject method */
    function void renderBullet(Bullet bullet)
    {
        var int x1;
        var int y1;
        var int x2;
        var int y2;
        
        // Unlike before, we do not need the +7 as we're not using a full 16 bits
        let x1 = bullet.getX();
        let y1 = bullet.getY();
        // -1 as it will include the last pixel
        let x2 = x1 + bullet.getWidth() - 1; 
        let y2 = y1 + bullet.getHeight() - 1;
        
        do Screen.drawRectangle(x1, y1, x2, y2);
        return;
    }

    /** Clear the screen and render a game-over message */
    function void renderGameOver()
    {
        do Screen.clearScreen();
        do Output.printString("GAME OVER");
        return;
    }
}