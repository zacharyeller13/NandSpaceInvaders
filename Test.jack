/** Test Methods */
class Test
{
    function void doStuff(SpaceInvaderGame game)
    {
        var int i;
        var int bulletCount;
        var Tank tank;
        var BulletList gameBullets;
        var Bullet currentBullet;
        
        let tank = game.getTank();
        
        do game.setBullets(BulletList.new(tank.fire(), null));

        let i = 0;
        while (true)
        {
            if (bulletCount = 20)
            {
                let i = 3;
            }
            let bulletCount = 0;
            do game.updateState();
            let gameBullets = game.getBullets();
            while (~(gameBullets = null))
            {
                let bulletCount = bulletCount + 1;
                let currentBullet = gameBullets.getData();
                let gameBullets = gameBullets.getNext();
            }
            do Output.printInt(bulletCount);
            do Sys.wait(100);
            do Output.backSpace();
            do Renderer.renderState(tank, game.getBullets(), game.getInvaders());
            do Sys.wait(100);
            let i = i + 1;
            if (i = 2)
            {
                let i = 0;
                // let invaders = InvaderList.new(Invader.new(10,10), invaders);
                if (bulletCount < 20)
                {
                    do game.setBullets(BulletList.new(tank.fire(), game.getBullets()));
                }
            }
            // do Output.printString("EOF");
            // do Sys.wait(100);
            // do Output.backSpace();
            // do Output.backSpace();
            // do Output.backSpace();
        }
        return;
    }

    function void testCollisions()
    {
        var Bullet testBullet;
        var Bullet removedBullet;
        var BulletList testBullets;
        var BulletList testCheckedBullet;
        var Invader testInvader;
        var Invader testInvader2;
        var InvaderList testInvaders;

        let testBullet = Bullet.new(200, 200);

        // testCheckedBullet is not head
        // let testCheckedBullet = BulletList.new(testBullet, null);
        // let testBullets = BulletList.new(Bullet.new(100, 200), testCheckedBullet);

        // testCheckedBullet is head
        // let testCheckedBullet = BulletList.new(testBullet, BulletList.new(Bullet.new(100, 200), null));
        // let testBullets = testCheckedBullet;

        // testCheckedBullet is by itself
        let testBullets = BulletList.new(testBullet, null);
        let testCheckedBullet = testBullets;
        
        do testBullets.printList();

        // Setup test invaders
        let testInvader = Invader.new(200, 200);
        let testInvader2 = Invader.new(1000, 200);
        let testInvaders = InvaderList.new(testInvader, InvaderList.new(testInvader2, null));

        // do Renderer.renderState(null, testBullets, testInvaders);
        do Sys.wait(100);

        do CollisionChecker.checkBulletCollisions(testCheckedBullet, testBullets, testInvaders);
        do Sys.wait(1000);
        // do testBullets.remove(testCheckedBullet);
        do testBullets.printList();

        // do Renderer.renderState(null, testBullets, testInvaders);

        return;
    }

    function void testSingleInvaderRemoval()
    {
        var Invader testInvader;
        var InvaderList testInvaders;
        var InvaderList invaderToRemove;

        let testInvader = Invader.new(200, 200);
        // List, length 1
        let testInvaders = InvaderList.new(testInvader, null);

        do testInvaders.printList();

        // Remove front
        let invaderToRemove = testInvaders;
        do testInvaders.remove(invaderToRemove);

        do testInvaders.printList();
        return;
    }

    function void testListInvaderFrontRemoval()
    {
        var Invader testInvader;
        var Invader testInvader2;
        var Invader testInvader3;
        var InvaderList testInvaders;
        var InvaderList invaderToRemove;

        let testInvader = Invader.new(200, 200);
        let testInvader2 = Invader.new(1000, 200);
        let testInvader3 = Invader.new(500, 200);
        let testInvaders = InvaderList.new(
            testInvader, InvaderList.new(
                testInvader2, InvaderList.new(
                    testInvader3, null
                )
            )
        );

        do Sys.wait(100);

        do testInvaders.printList();

        // Remove front
        let invaderToRemove = testInvaders;
        do testInvaders.remove(invaderToRemove);

        do testInvaders.printList();

        return;
    }

    function void testListInvaderMiddleRemoval()
    {
        var Invader testInvader;
        var Invader testInvader2;
        var Invader testInvader3;
        var InvaderList testInvaders;
        var InvaderList invaderToRemove;

        let testInvader = Invader.new(200, 200);
        let testInvader2 = Invader.new(1000, 200);
        let testInvader3 = Invader.new(500, 200);
        let testInvaders = InvaderList.new(
            testInvader, InvaderList.new(
                testInvader2, InvaderList.new(
                    testInvader3, null
                )
            )
        );

        do Sys.wait(100);

        do testInvaders.printList();

        // Remove middle
        let invaderToRemove = testInvaders.getNext();
        do testInvaders.remove(invaderToRemove);

        
        do testInvaders.printList();
        
        return;
    }

    function void testListInvaderBackRemoval()
    {
        var Invader testInvader;
        var Invader testInvader2;
        var Invader testInvader3;
        var InvaderList testInvaders;
        var InvaderList invaderToRemove;

        let testInvader = Invader.new(200, 200);
        let testInvader2 = Invader.new(1000, 200);
        let testInvader3 = Invader.new(500, 200);
        let testInvaders = InvaderList.new(
            testInvader, InvaderList.new(
                testInvader2, InvaderList.new(
                    testInvader3, null
                )
            )
        );

        do Sys.wait(100);

        do testInvaders.printList();

        // Remove back
        let invaderToRemove = testInvaders.getNext();
        let invaderToRemove = invaderToRemove.getNext();
        do testInvaders.remove(invaderToRemove);

        do testInvaders.printList();

        return;
    }

    function void testListInvaderAdd()
    {
        var InvaderList invaders;
        var Invader newInvader;

        do Logger.logString("Testing Single Item List", null);
        let invaders = InvaderList.new(
            Invader.new(200, 200),
            null
        );

        do invaders.printList();
        do Sys.wait(500);

        let newInvader = Invader.new(250, 250);
        do invaders.add(newInvader);
        do invaders.printList();

        return;
    }

    function void testListInvaderAddToEmpty()
    {
        var InvaderList invaders;
        var Invader newInvader;

        do Logger.logString("Testing Empty List", null);
        let invaders = InvaderList.new(
            null,
            null
        );

        do invaders.printList();
        do Sys.wait(500);

        let newInvader = Invader.new(250, 250);
        do invaders.add(newInvader);
        do invaders.printList();

        return;
    }

    function void testListInvaderAddTo2()
    {
        var InvaderList invaders;
        var Invader newInvader;

        do Logger.logString("Testing 2 Item List", null);
        let invaders = InvaderList.new(
            Invader.new(200,200),
            InvaderList.new(
                Invader.new(200, 300),
                null
            )
        );

        do invaders.printList();
        do Sys.wait(500);

        let newInvader = Invader.new(250, 250);
        do invaders.add(newInvader);
        do invaders.printList();

        return;
    }


    function void testSingleBulletRemoval()
    {
        var Bullet testBullet;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        // List, length 1
        let testBullets = BulletList.new(testBullet, null);

        do testBullets.printList();

        // Remove front
        let bulletToRemove = testBullets;
        do testBullets.remove(bulletToRemove);

        do testBullets.printList();
        return;
    }

    function void testListBulletFrontRemoval()
    {
        var Bullet testBullet;
        var Bullet testBullet2;
        var Bullet testBullet3;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        let testBullet2 = Bullet.new(1000, 200);
        let testBullet3 = Bullet.new(500, 200);
        let testBullets = BulletList.new(
            testBullet, BulletList.new(
                testBullet2, BulletList.new(
                    testBullet3, null
                )
            )
        );

        do Sys.wait(100);

        do testBullets.printList();

        // Remove front
        let bulletToRemove = testBullets;
        do testBullets.remove(bulletToRemove);

        do testBullets.printList();

        return;
    }

    function void testListBulletMiddleRemoval()
    {
        var Bullet testBullet;
        var Bullet testBullet2;
        var Bullet testBullet3;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        let testBullet2 = Bullet.new(1000, 200);
        let testBullet3 = Bullet.new(500, 200);
        let testBullets = BulletList.new(
            testBullet, BulletList.new(
                testBullet2, BulletList.new(
                    testBullet3, null
                )
            )
        );

        do Sys.wait(100);

        do testBullets.printList();

        // Remove middle
        let bulletToRemove = testBullets.getNext();
        do testBullets.remove(bulletToRemove);

        
        do testBullets.printList();
        
        return;
    }

    function void testListBulletBackRemoval()
    {
        var Bullet testBullet;
        var Bullet testBullet2;
        var Bullet testBullet3;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        let testBullet2 = Bullet.new(1000, 200);
        let testBullet3 = Bullet.new(500, 200);
        let testBullets = BulletList.new(
            testBullet, BulletList.new(
                testBullet2, BulletList.new(
                    testBullet3, null
                )
            )
        );

        do Sys.wait(100);

        do testBullets.printList();

        // Remove back
        let bulletToRemove = testBullets.getNext();
        let bulletToRemove = bulletToRemove.getNext();
        do testBullets.remove(bulletToRemove);

        do testBullets.printList();

        return;
    }

    function void testListBulletAdd()
    {
        var BulletList bullets;
        var Bullet newBullet;

        do Logger.logString("Testing Single Item List", null);
        let bullets = BulletList.new(
            Bullet.new(200, 200),
            null
        );

        do bullets.printList();
        do Sys.wait(500);

        let newBullet = Bullet.new(250, 250);
        do bullets.add(newBullet);
        do bullets.printList();

        return;
    }

    function void testListBulletAddToEmpty()
    {
        var BulletList bullets;
        var Bullet newBullet;

        do Logger.logString("Testing Empty List", null);
        let bullets = BulletList.new(
            null,
            null
        );

        do bullets.printList();
        do Sys.wait(500);

        let newBullet = Bullet.new(250, 250);
        do bullets.add(newBullet);
        do bullets.printList();

        return;
    }

    function void testListBulletAddTo2()
    {
        var BulletList bullets;
        var Bullet newBullet;

        do Logger.logString("Testing 2 Item List", null);
        let bullets = BulletList.new(
            Bullet.new(200,200),
            BulletList.new(
                Bullet.new(200, 300),
                null
            )
        );

        do bullets.printList();
        do Sys.wait(500);

        let newBullet = Bullet.new(250, 250);
        do bullets.add(newBullet);
        do bullets.printList();

        return;
    }
}
