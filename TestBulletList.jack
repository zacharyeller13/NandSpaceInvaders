/** Test Bullet List Methods */
class TestBulletList
{
    /** Test List movement works with Rendering and add/remove */
    function void testRenderBulletListAndMove()
    {
        var Bullet testBullet;
        var Bullet testBullet2;
        var Bullet testBullet3;
        var Bullet newBullet;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        let testBullet2 = Bullet.new(1000, 200);
        let testBullet3 = Bullet.new(500, 200);
        let testBullets = BulletList.new(
            testBullet, BulletList.new(
                testBullet2, BulletList.new(
                    testBullet3, null
                )
            )
        );

        do Sys.wait(100);

        do Renderer.renderState(null, null, testBullets);
        do Sys.wait(500);

        do Logger.logString("Moving", null);
        do testBullets.move();

        do Logger.logString("After moving", null);
        do Renderer.renderState(null, null, testBullets);
        do Sys.wait(500);

        // Remove middle
        do Logger.logString("Removing", null);
        let bulletToRemove = testBullets.getNext();
        do testBullets.remove(bulletToRemove);

        do Renderer.renderState(null, null, testBullets);
        do Sys.wait(500);

        do Logger.logString("Move after removing", null);
        do Sys.wait(500);
        do testBullets.move();
        do Sys.wait(500);
        do Renderer.renderState(null, null, testBullets);

        do Logger.logString("Adding and moving", null);
        let newBullet = Bullet.new(250, 150);
        do testBullets.add(newBullet);
        do testBullets.move();
        do Renderer.renderState(null, null, testBullets);

        return;        
    }

    /** Test List functions work with Rendering */
    function void testRenderBulletListSingleBullet()
    {
        var Bullet testBullet;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        // List, length 1
        let testBullets = BulletList.new(testBullet, null);

        do Renderer.renderState(null, null, testBullets);
        do Sys.wait(500);

        // Remove front
        let bulletToRemove = testBullets;
        do testBullets.remove(bulletToRemove);
        do Sys.wait(500);

        do Renderer.renderState(null, null, testBullets);
        return;
    }

    /** Test List of length 3, remove front node, renders properly */
    function void testRenderBulletListFrontRemoval()
    {
        var Bullet testBullet;
        var Bullet testBullet2;
        var Bullet testBullet3;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        let testBullet2 = Bullet.new(1000, 200);
        let testBullet3 = Bullet.new(500, 200);
        let testBullets = BulletList.new(
            testBullet, BulletList.new(
                testBullet2, BulletList.new(
                    testBullet3, null
                )
            )
        );

        do Sys.wait(100);

        do Renderer.renderState(null, null, testBullets);
        do Sys.wait(500);

        // Remove front
        let bulletToRemove = testBullets;
        do testBullets.remove(bulletToRemove);

        do Renderer.renderState(null, null, testBullets);
        do Sys.wait(500);

        return;
    }

    /** Test List of length 3, remove middle node, renders properly */
    function void testRenderBulletListMiddleRemoval()
    {
        var Bullet testBullet;
        var Bullet testBullet2;
        var Bullet testBullet3;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        let testBullet2 = Bullet.new(1000, 200);
        let testBullet3 = Bullet.new(500, 200);
        let testBullets = BulletList.new(
            testBullet, BulletList.new(
                testBullet2, BulletList.new(
                    testBullet3, null
                )
            )
        );

        do Sys.wait(100);

        do Renderer.renderState(null, null, testBullets);
        do Sys.wait(500);

        // Remove middle
        let bulletToRemove = testBullets.getNext();
        do testBullets.remove(bulletToRemove);

        do Renderer.renderState(null, null, testBullets);
        do Sys.wait(500);
        
        return;
    }

    /** Test List of length 3, remove last node, renders properly */
    function void testRenderBulletListBackRemoval()
    {
        var Bullet testBullet;
        var Bullet testBullet2;
        var Bullet testBullet3;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        let testBullet2 = Bullet.new(1000, 200);
        let testBullet3 = Bullet.new(500, 200);
        let testBullets = BulletList.new(
            testBullet, BulletList.new(
                testBullet2, BulletList.new(
                    testBullet3, null
                )
            )
        );

        do Sys.wait(100);

        do Renderer.renderState(null, null, testBullets);
        do Sys.wait(500);

        // Remove back
        let bulletToRemove = testBullets.getNext();
        let bulletToRemove = bulletToRemove.getNext();
        do testBullets.remove(bulletToRemove);

        do Renderer.renderState(null, null, testBullets);
        do Sys.wait(500);

        return;
    }

    /** Test list of length 1, add 1 node, renders properly */
    function void testRenderListBulletAdd()
    {
        var BulletList bullets;
        var Bullet newBullet;

        do Logger.logString("Testing Single Item List", null);
        let bullets = BulletList.new(
            Bullet.new(200, 200),
            null
        );

        do Renderer.renderState(null, null, bullets);
        do Sys.wait(500);

        let newBullet = Bullet.new(250, 150);
        do bullets.add(newBullet);
        do Renderer.renderState(null, null, bullets);
        do Sys.wait(500);

        return;
    }

    /** Test empty list, add 1 node, renders properly */
    function void testRenderListBulletAddToEmpty()
    {
        var BulletList bullets;
        var Bullet newBullet;

        do Logger.logString("Testing Empty List", null);
        let bullets = BulletList.new(
            null,
            null
        );

        do Renderer.renderState(null, null, bullets);
        do Sys.wait(500);

        let newBullet = Bullet.new(250, 150);
        do bullets.add(newBullet);
        do Renderer.renderState(null, null, bullets);
        do Sys.wait(500);

        return;
    }

    /** Test list of length 2, add 1 node, renders properly */
    function void testRenderListBulletAddTo2()
    {
        var BulletList bullets;
        var Bullet newBullet;

        do Logger.logString("Testing 2 Item List", null);
        let bullets = BulletList.new(
            Bullet.new(200,200),
            BulletList.new(
                Bullet.new(300, 200),
                null
            )
        );

        do Renderer.renderState(null, null, bullets);
        do Sys.wait(500);

        let newBullet = Bullet.new(250, 150);
        do bullets.add(newBullet);
        do Renderer.renderState(null, null, bullets);
        do Sys.wait(500);

        return;
    }   

    /** BulletList Unit Tests */
    function void testSingleBulletRemoval()
    {
        var Bullet testBullet;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        // List, length 1
        let testBullets = BulletList.new(testBullet, null);

        do testBullets.printList();

        // Remove front
        let bulletToRemove = testBullets;
        do testBullets.remove(bulletToRemove);

        do testBullets.printList();
        return;
    }

    function void testListBulletFrontRemoval()
    {
        var Bullet testBullet;
        var Bullet testBullet2;
        var Bullet testBullet3;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        let testBullet2 = Bullet.new(1000, 200);
        let testBullet3 = Bullet.new(500, 200);
        let testBullets = BulletList.new(
            testBullet, BulletList.new(
                testBullet2, BulletList.new(
                    testBullet3, null
                )
            )
        );

        do Sys.wait(100);

        do testBullets.printList();

        // Remove front
        let bulletToRemove = testBullets;
        do testBullets.remove(bulletToRemove);

        do testBullets.printList();

        return;
    }

    function void testListBulletMiddleRemoval()
    {
        var Bullet testBullet;
        var Bullet testBullet2;
        var Bullet testBullet3;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        let testBullet2 = Bullet.new(1000, 200);
        let testBullet3 = Bullet.new(500, 200);
        let testBullets = BulletList.new(
            testBullet, BulletList.new(
                testBullet2, BulletList.new(
                    testBullet3, null
                )
            )
        );

        do Sys.wait(100);

        do testBullets.printList();

        // Remove middle
        let bulletToRemove = testBullets.getNext();
        do testBullets.remove(bulletToRemove);

        
        do testBullets.printList();
        
        return;
    }

    function void testListBulletBackRemoval()
    {
        var Bullet testBullet;
        var Bullet testBullet2;
        var Bullet testBullet3;
        var BulletList testBullets;
        var BulletList bulletToRemove;

        let testBullet = Bullet.new(200, 200);
        let testBullet2 = Bullet.new(1000, 200);
        let testBullet3 = Bullet.new(500, 200);
        let testBullets = BulletList.new(
            testBullet, BulletList.new(
                testBullet2, BulletList.new(
                    testBullet3, null
                )
            )
        );

        do Sys.wait(100);

        do testBullets.printList();

        // Remove back
        let bulletToRemove = testBullets.getNext();
        let bulletToRemove = bulletToRemove.getNext();
        do testBullets.remove(bulletToRemove);

        do testBullets.printList();

        return;
    }

    function void testListBulletAdd()
    {
        var BulletList bullets;
        var Bullet newBullet;

        do Logger.logString("Testing Single Item List", null);
        let bullets = BulletList.new(
            Bullet.new(200, 200),
            null
        );

        do bullets.printList();
        do Sys.wait(500);

        let newBullet = Bullet.new(250, 250);
        do bullets.add(newBullet);
        do bullets.printList();

        return;
    }

    function void testListBulletAddToEmpty()
    {
        var BulletList bullets;
        var Bullet newBullet;

        do Logger.logString("Testing Empty List", null);
        let bullets = BulletList.new(
            null,
            null
        );

        do bullets.printList();
        do Sys.wait(500);

        let newBullet = Bullet.new(250, 250);
        do bullets.add(newBullet);
        do bullets.printList();

        return;
    }

    function void testListBulletAddTo2()
    {
        var BulletList bullets;
        var Bullet newBullet;

        do Logger.logString("Testing 2 Item List", null);
        let bullets = BulletList.new(
            Bullet.new(200,200),
            BulletList.new(
                Bullet.new(200, 300),
                null
            )
        );

        do bullets.printList();
        do Sys.wait(500);

        let newBullet = Bullet.new(250, 250);
        do bullets.add(newBullet);
        do bullets.printList();

        return;
    }
}
