/** Implement a singly linked list of invaders */
class InvaderList 
{
    field Invader data; // current Invader
    field InvaderList next; // next Node

    /** Creates a list */
    constructor InvaderList new(Invader car, InvaderList cdr)
    {
        let data = car;
        let next = cdr;
        return this;
    }

    /** Disposes list and all items in the list */
    method void dispose()
    {
        if (~(next = null))
        {
            do next.dispose();
        }
        do data.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Accessors */
    method Invader getData() { return data; }
    method InvaderList getNext() { return next; }
    method void setNext(InvaderList nextList) { let next = nextList; return; }

    /** Move all invaders in list */
    method void move()
    {
        var InvaderList current;
        var Invader currentInvader;
        let current = this;
        while (~(current = null))
        {
            let currentInvader = current.getData();
            do currentInvader.move();
            let current = current.getNext();
        }
        return;
    }

    /** Remove an invader from the list 
      * should always be called on the head node */
    method void remove(InvaderList invaderToRemove)
    {
        var InvaderList previous;
        var InvaderList current;
        var Invader currentData;

        // Base case on the head node
        if (this = invaderToRemove)
        {
            do Logger.logString("this = invaderToRemove", null);

            if (~(next = null))
            {
                do Logger.logString("Moving data up", null);
                do data.dispose();
                let data = next.getData();
                let previous = next;
                let next = next.getNext();

                // Prevent a memory leak by disposing of the node that's moved up
                do previous.setNext(null);
                do previous.dispose();
            }
            else
            {
                do dispose();
                let data = null;
            }
            return;
        }

        // Iterating through list to check each node
        let previous = this;
        let current = next;
        while (~(current = null))
        {
            if (current = invaderToRemove)
            {
                do previous.setNext(current.getNext());
                do current.setNext(null);
                let currentData = current.getData();
                do currentData.dispose();
                do current.dispose();
                return;
            }
            let previous = current;
            let current = current.getNext();
        }
        // Should never reach here, but if, for some reason, the invaderToRemove is orphaned
        // we must still return.
        return;

    }
    
    /** Visualize any node in the list */
    method void printNode()
    {
        if (data = null)
        {
            do Output.printString("null");
            return;
        }
        do Output.printInt(data.getX());
        do Output.printString(",");
        do Output.printInt(data.getY());
        do Output.println();
        return;
    }

    /** Visualize the entire list */
    method void printList()
    {
        do Output.printString("( data= ");
        do printNode();
        do Output.printString(" next= ");
        if (~(next = null))
        {
            do next.printList();
        }
        else
        {
            do Output.printString(" null ");
        }
        do Output.printString(" )");
        do Output.println();
        return;
    }
}