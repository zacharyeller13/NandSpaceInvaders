/** Implement a singly linked list of bullets */
class BulletList
{
    field Bullet data;
    field BulletList next;

    /** Constructor the the list of bullets */
    constructor BulletList new(Bullet car, BulletList cdr)
    {
        let data = car;
        let next = cdr;
        return this;
    }

    /** Disposes list and all items in the list */
    method void dispose()
    {
        if (~(next = null))
        {
            do next.dispose();
        }
        do data.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Accessors */
    method Bullet getData() { return data; }
    method BulletList getNext() { return next; }
    method void setNext(BulletList nextList) { let next = nextList; return; }
    method void setData(Bullet bullet) { let data = bullet; return; }

    /** Move all bullets in the list; disposing of them when they exit the screen */
    method void move()
    {
        var BulletList current;
        var Bullet currentBullet;
        var BulletList previous;
        var BulletList temp;
        var BulletList head;

        let head = this;
        let current = this;
        
        while (~(current = null))
        {
            let currentBullet = current.getData();

            // Check because the head node of the list may
            // be an empty list
            if (~(currentBullet = null))
            {
                do currentBullet.move();
    
                // Exiting screen - dispose and shift list up
                if (currentBullet.getY() < (-currentBullet.getHeight()))
                {
                    let temp = current.getNext();
                    do head.remove(current);
                    let current = temp;
                }
                else
                {
                    let previous = current;
                    let current = current.getNext();
                }
            }

        }
        return;
    }
    
    /** Remove bullet from the list 
      * should always be called on the head node */
    method void remove(BulletList bulletToRemove)
    {
        var BulletList previous;
        var BulletList current;
        var Bullet currentData;

        // Base case on head node
        if (this = bulletToRemove)
        {
            do Output.printString("this = bulletToRemove");
            let previous = this;
            let next = previous.getNext();
            if (~(next = null))
            {
                do Output.printString(" Moving data up ");
                let data = next.getData();
                do previous.setNext(null);
                do previous.dispose();
            }
            else
            {
                do dispose();
                let data = null;
            }
            return;
        }

        // logging
        do Output.printString("this != bulletToRemove");

        // Iterating through bullets to check each node
        let previous = this;
        let current = next;
        while (~(current = null))
        {
            if (current = bulletToRemove)
            {
                do previous.setNext(current.getNext());
                do current.setNext(null);
                let currentData = current.getData();
                do currentData.dispose();
                do current.dispose();
                return;
            }
            let previous = current;
            let current = current.getNext();
        }
        // Should never reach here, but if, for some reason, the bulletToRemove is orphaned
        // we must still return.
        return;
    }

    /** Basically just for logging purposes */
    method void printNode()
    {
        if (data = null)
        {
            do Output.printString("null");
            return;
        }
        do Output.printInt(data.getX());
        do Output.printString(",");
        do Output.printInt(data.getY());
        do Output.println();
        return;
    }

    /** Basically just for logging purposes */
    method void printList()
    {
        do Output.printString("( data= ");
        do printNode();
        do Output.printString(" next= ");
        if (~(next = null))
        {
            do next.printList();
        }
        else
        {
            do Output.printString(" null ");
        }
        do Output.printString(" )");
        do Output.println();
        return;
    }
}