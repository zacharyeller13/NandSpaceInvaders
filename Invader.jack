/** Implements an invader */
class Invader 
{
    field int x, y; // screen coordinates of the invader
    field int width, height; // sprite width and heigth
    field int direction; // 1 or -1 for right vs left
    field int location; // mapped memory location of x,y coordinates
    field Array pixels; // Represents all pixels of the sprite

    /** Constructs a new invader with the given location */
    constructor Invader new(int Ax, int Ay) 
    {
        let x = Ax;
        let y = Ay;
        let width = 16;
        let height = 9;
        let direction = 1;
        let location = (32 * y) + (x / 16);
        do initPixels();
        return this;
    }
    
    /** Disposes the Invader */
    method void dispose() 
    {
        do Memory.deAlloc(this);
        return;
    }
    
    /** Instance-level Accessors */
    method int getX() { return x; }
    method int getY() { return y; }
    method int getWidth() { return width; }
    method int getHeight() { return height; }
    method int getLocation() { return location; }
    method Array getPixels() { return pixels; }

    /** Initialize the pixels array */
    method void initPixels()
    {
        let pixels = Array.new(12);
        let pixels[0] = 2016;
        let pixels[1] = 2064;
        let pixels[2] = 4104;
        let pixels[3] = 4104;
        let pixels[4] = 32766;
        let pixels[5] = -32767;
        let pixels[6] = -32767;
        let pixels[7] = -32767;
        let pixels[8] = 32766;
        let pixels[9] = 0;
        let pixels[10] = 0;
        let pixels[11] = 0;

        return;
    }

    /** Moves invader down at an angle */
    method void move() 
    {
        // Check that has not reached the bottom of the screen
        if (y < (255 - height)) {
            do checkWallCollision();

            let x = x + (width * direction);
            let y = y + 2;
            let location = (32 * y) + (x / 16);
        }
        return;
    }

    /** Checks for collision on walls 
      * changing direction when necessary */
    method void checkWallCollision() 
    {
        if (direction = 1) 
        {
            if ((x + width) > 511) 
            {
                do changeDirection();
            }
        }
        else 
        {
            if ((x - width) < 0) 
            {
                do changeDirection();
            }
        }
        return;
    }
    
    /** Change direction if hits wall */
    method void changeDirection() 
    {
        let direction = direction * -1;
        return;
    }
}