/** Implements the Game logic */
class SpaceInvaderGame
{
    field Tank tank; // Player
    field InvaderList invaders; // All invaders
    field BulletList bullets; // All bullets
    field Renderer renderer; // To render frames
    field boolean isGameOver;
    field int frameNum;

    constructor SpaceInvaderGame new()
    {
        let tank = Tank.new();
        let invaders = InvaderList.new(Invader.new(200,0), null);
        return this;
    }

    /** Dispose of game and all it's component parts */
    method void dispose()
    {
        do tank.dispose();
        do invaders.dispose();
        do bullets.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Accessors */
    method Tank getTank() { return tank; }
    method InvaderList getInvaders() { return invaders; }
    method void setInvaders(InvaderList newInvaders) { let invaders = newInvaders; return; }
    method BulletList getBullets() { return bullets; }
    method void setBullets(BulletList newBullets) { let bullets = newBullets; return; }

    /** Update game state */
    method void updateState()
    {
        do tank.move();
        do invaders.move();
        do bullets.move();
        // do checkCollisions();
        // TODO: Check collisions and update invaders and bullets.  Maybe do during move(); refactor out of List
        // TODO: Check game over
        return;
    }

    /** Check collision between all bullets and all invaders
      * To find hits */
    method void checkCollisions()
    {
        var BulletList remainingBullets;
        var BulletList currentBullets;
        var Bullet currentBullet;
        var InvaderList currentInvaders;
        var Invader currentInvader;
        let currentBullets = bullets;
        let currentInvaders = invaders;
        
        while (~(currentBullets = null))
        {
            while (~(currentInvaders = null))
            {
                let currentBullet = currentBullets.getData();
                let currentInvader = currentInvaders.getData();

                // Check that currentBullet and currentInvader are not null
                // As if there was only 1 item and they were removed, it would be an empty list
                if (~(currentBullet = null) | ~(currentInvader = null))
                {

                }
                let currentInvaders = currentInvaders.getNext();
            }
            let currentBullets = currentBullets.getNext();
        }
        let bullets = remainingBullets;
        return;
    }

    // TODO: Run game infinitely until a spaceship lands signifiying a loss
    method void run()
    {
        return;
    }

    // TODO: Display a loss message
}